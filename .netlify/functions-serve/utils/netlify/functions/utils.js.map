{
  "version": 3,
  "sources": ["../../../../../../Users/matanparker/Documents/Optimize/OptimizeProductOffer2.0/netlify/functions/utils.js"],
  "sourceRoot": "/var/folders/lm/v2jwz80j4yd11wp447rx9t7h0000gn/T/tmp-57041-fBefFKw4rg7d",
  "sourcesContent": ["const fs = require('fs');\nconst path = require('path');\n\n// CORS headers for all responses\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'Content-Type',\n  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS'\n};\n\n// Helper to create JSON responses\nfunction createResponse(data, statusCode = 200) {\n  return {\n    statusCode,\n    headers: {\n      ...corsHeaders,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  };\n}\n\n// Simple CSV parser\nfunction parseCSV(csvText) {\n  const lines = csvText.trim().split('\\n');\n  const headers = lines[0].split(',').map(h => h.trim().replace(/\"/g, ''));\n  const data = [];\n  \n  for (let i = 1; i < lines.length; i++) {\n    const values = lines[i].split(',').map(v => v.trim().replace(/\"/g, ''));\n    const row = {};\n    headers.forEach((header, index) => {\n      row[header] = values[index] || '';\n    });\n    data.push(row);\n  }\n  \n  return data;\n}\n\n// Load CSV data\nfunction loadCSVData() {\n  try {\n    // Get the project root directory (two levels up from netlify/functions)\n    const projectRoot = path.resolve(__dirname, '../../');\n    \n    const mediumCSVPath = path.join(projectRoot, 'demo_data_medium.csv');\n    const smallCSVPath = path.join(projectRoot, 'demo_data_small.csv');\n    \n    const mediumCSV = fs.readFileSync(mediumCSVPath, 'utf8');\n    const smallCSV = fs.readFileSync(smallCSVPath, 'utf8');\n    \n    const mediumData = parseCSV(mediumCSV);\n    const smallData = parseCSV(smallCSV);\n    \n    return { mediumData, smallData };\n  } catch (error) {\n    console.error('Error loading CSV data:', error);\n    return { mediumData: [], smallData: [] };\n  }\n}\n\n// Filter data by time window\nfunction filterByWindow(data, dateColumn, days) {\n  if (!data || data.length === 0) return [];\n  \n  // First try to filter by the window\n  const now = new Date();\n  const startDate = new Date(now.getTime() - days * 24 * 60 * 60 * 1000);\n  \n  const filteredData = data.filter(row => {\n    const dateStr = row[dateColumn];\n    if (!dateStr) return true; // Include if no date\n    \n    const rowDate = new Date(dateStr);\n    return !isNaN(rowDate.getTime()) && rowDate >= startDate;\n  });\n  \n  // If no data in window, return all data (for demo purposes)\n  if (filteredData.length === 0) {\n    console.log(`No data found in ${days}-day window, returning all data for demo`);\n    return data;\n  }\n  \n  return filteredData;\n}\n\n// Compute metrics from data\nfunction computeMetrics(data) {\n  if (!data || data.length === 0) {\n    return {\n      impressions: 0,\n      reach: 0,\n      frequency: 0,\n      conversions: 0,\n      revenue: 0,\n      cost: 0,\n      cpc: 0,\n      conversion_rate: 0,\n      roas: 0,\n      simulated: true\n    };\n  }\n\n  const totalOrders = data.length;\n  \n  // Sum quantities (handle different column names)\n  const totalQuantity = data.reduce((sum, row) => {\n    const qty = parseFloat(row.quantity) || parseFloat(row.UnitsSold) || 1;\n    return sum + qty;\n  }, 0);\n  \n  // Sum revenue (handle different column names)\n  const revenue = data.reduce((sum, row) => {\n    const amt = parseFloat(row.final_amount) || parseFloat(row.Revenue) || 0;\n    return sum + amt;\n  }, 0);\n  \n  // Count unique customers/locations\n  const uniqueCustomers = new Set(data.map(row => row.customer_id || row.Location)).size;\n  \n  // Calculate derived metrics\n  const impressions = Math.floor(totalQuantity * 120);\n  const reach = Math.max(1, uniqueCustomers || Math.floor(totalOrders / 2));\n  const frequency = Math.round((impressions / reach) * 100) / 100;\n  const conversions = totalOrders;\n  const cost = revenue * 0.6; // Assume 60% of revenue is cost\n  const cpc = Math.round((cost / conversions) * 100) / 100;\n  const conversionRate = Math.round((conversions / impressions) * 10000) / 10000;\n  const roas = cost > 0 ? Math.round((revenue / cost) * 100) / 100 : 0;\n\n  return {\n    impressions,\n    reach,\n    frequency,\n    conversions,\n    revenue: Math.round(revenue * 100) / 100,\n    cost: Math.round(cost * 100) / 100,\n    cpc,\n    conversion_rate: conversionRate,\n    roas,\n    simulated: true\n  };\n}\n\n// Mock data stores\nconst mockUsers = [\n  { username: 'demo', password: 'demo', name: 'Demo User', email: 'demo@example.com' }\n];\n\nconst mockFAQs = [\n  {\n    q: \"What are the top factors driving the highest conversion rates?\",\n    a: \"Top drivers: product category 'Electronics', regions 'Europe' and 'Asia Pacific', and orders with quantity > 5. Increase budget on high CVR segments.\"\n  },\n  {\n    q: \"Which campaigns are underperforming against benchmark?\",\n    a: \"Campaigns with CPC > 500 and CVR < 0.01 are below benchmark. Consider decreasing bids or reallocating budget.\"\n  },\n  {\n    q: \"Show me the executive summary for the last 14 days\",\n    a: \"Impressions ~1.2M, Reach ~35k, Frequency 3.2, Conversions 1.1k, ROAS 1.6. Top recs: Increase Budget for Electronics, Decrease Bids for General.\"\n  }\n];\n\nconst mockRules = [\n  {\n    id: \"rule-boost-electronics\",\n    campaign: \"Electronics\",\n    action: \"Increase Budget\",\n    benefit: \"Predicted ROAS +0.06\",\n    explanation: \"Electronics category shows strong CVR; increasing budget can scale results.\"\n  },\n  {\n    id: \"rule-trim-general\",\n    campaign: \"General\",\n    action: \"Decrease Bids\",\n    benefit: \"Predicted CPA -8%\",\n    explanation: \"High CPC detected relative to conversions; trim bids to improve efficiency.\"\n  }\n];\n\nmodule.exports = {\n  corsHeaders,\n  createResponse,\n  parseCSV,\n  loadCSVData,\n  filterByWindow,\n  computeMetrics,\n  mockUsers,\n  mockFAQs,\n  mockRules\n};\n"],
  "mappings": "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",
  "names": []
}
